name: 'Terraform with github actions ' 

on:
  push:
    branches:
    - "master"
  pull_request:
  workflow_dispatch: 

# env:
#   export AWS_ACCESS_KEY_ID : ${{ secrets.ACCESS_KEY }}
#   export AWS_SECRET_ACCESS_KEY : ${{ secrets.SECRET_KEY }}
#   # ROOT_PATH: '/Users/risha/Documents/GitHub/terraform/vpc'
#   # ROOT_PATH: '${{ github.workspace }}/vpc'


jobs:
  terraform_plan:
    name: 'Terraform_plan'
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: vpc 


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: vpc 
  
  terraform_apply:
    name: 'Terraform_apply '
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: vpc 

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: vpc
  
  terraform_destroy:
    name: 'Terraform_destroy '
    runs-on: ubuntu-latest
    needs: [terraform_apply]
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: vpc 

    - name: Terraform destroy
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform destroy -auto-approve -input=false
      working-directory: vpc